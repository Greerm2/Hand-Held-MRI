########################################################
#
#ImagingSeq
#Program to collect images with the single sided MRI Sensor
#To be used with gradient driver circuit designed by Prof Mandal
#Modified from a simple CPMG Sequence
#Written by Mason Greer
#PhD Student CWRU
#2016
#
#
########################################################

procedure(pulse_program,dir,mode)


 #Interface description (name, label, x, y, ctrlType, varType)
   interface = ["b1Freq",       "B1 Frequency (MHz)",   "0","0",     "tbwv",  "freq",
               "ieTime",       "Inter-exp delay (ms)", "0","1.6",   "tbwv",   "float,[20,1e8]",
               "90Amplitude",  "90 amplitude (dB)",    "1","0",     "tb",     "float,[-85,1]",
               "180Amplitude", "180 amplitude (dB)",   "1","1",     "tb",     "float,[-85,1]",
               "pulseLength90",  "Pulse length 90(us)",    "1","2",     "tb",     "float,[1,500]",
			   "pulseLength180",  "Pulse length 180(us)",    "1","3",     "tb",     "float,[1,500]",
               "echoTime",     "Echotime (us)",        "2","0",     "tb",     "sdelay",
               "nrEchoes",     "Number of echoes",     "2","1",     "tb",     "integer,[1,8192]",
               "echoShift",    "Echo shift (us)",      "2","2",     "tb",     "float,[-20,20]",
               "dummyEchoes",  "Dummy echoes",         "3","0",     "tb",     "integer,[0,100]",
               "dummies",      "Dummy scans",          "3","1",     "tb",     "integer,[0,20]",
               "numSteps",     "Number of Steps",      "3","2",     "tb",     "integer,[0,10000]",
               "xGradLength",  "X Grad Length (Short)",    "4","0",     "tb",     "sdelay",
               "zGradLength",  "Z Grad Length (Long)",    "4","1",     "tb",     "sdelay",
               "xGradChannel",     "X Grad Channel (0-3)",             "5","0",     "tb", "integer, [0,3]",
               "zGradChannel",     "Z Grad Channel (0-3)",             "5","1",     "tb", "integer, [0,3]",
			   "kSpaceFilePath",   "K Space File Path", "5","2", "tb","string"]

  tabs = ["Pulse_sequence","Progress","Acquisition","Laplace_CPMG","File_Settings"]

# Relationships between pulse-sequence and GUI parameters
   relationships = ["nxShim = xcal*xshim/1000", # x shim value
                    "nyShim = ycal*yshim/1000", # y shim value
                    "nzShim = zcal*zshim/1000", # z shim value
                    "noShim = ocal*oshim/1000", # o shim value
                    "a90 = 90Amplitude",                   
                    "a180 = 180Amplitude",
                    "dRF90 = pulseLength90",
			        "dRF180 = pulseLength180",
                    "d90_180 = echoTime/2-dRF90-pgo-0.5",
                    "d180_acq = echoTime/2-acqTime*500-dRF180/2+rxLat-1+echoShift",
                    "dAcq = echoTime-dRF180-pgo-d180_acq-1",
                    "dDummy = echoTime-dRF180-pgo",
					"dRegulator = 300",
                    #The length of the gradients
                    "dXGrad = xGradLength",
                    "dZGrad = zGradLength",
                    
                    #The dDealtaGrad is the time it takes to finish the zgrad after the x grad is turned off
                    #The 4.4 comes from the fact that it takes 2.2 us to turn on a gradient and 2.2 to turn one off 
                    "dDeltaGrad = dZGrad-dXGrad-4.4",
                     #"dDeltaGrad = 0",
                    #Gradient Channels
                    "nGradX = xGradChannel",
                    "nGradZ = zGradChannel",

                    #Gradient Amplitudes
                    "nXGradAmplitude = round(10*32768/10)",
                    "nZGradAmplitude = round(10*32768/10)",

                    #Delay for power supplies to settle
                    "wRegulator = 500*100",
      
                     
                    #This will need tested to see if I need the pgo and 0.5
                    "dEncoding =  dZGrad+2.2+2.2+2.2+2.2+0.18+0.18+echoTime/2-pgo-0.5",

                    #Number of steps in one dimension
                    "numSteps = numSteps",

                    "nEchoes = nrEchoes",
                    "nPnts = nrPnts",
                    "nDummy = dummyEchoes",
                    "totPnts = nrPnts*nrEchoes",
                    "totTime = nrEchoes*echoTime*(dummyEchoes+1)",
                    "b5 = 0x01", # pin 5 - EN_P0
                    "b4 = 0x04",
					"b9 = 0x02",
					"b3 = 0x10",
					"b8 = 0x08"]

                    # These parameters will be changed between experiments
                    variables = ["nXGradAmplitude", "nZGradAmplitude"]

                    # x and y spacing between controls
                    dim = [155,26]

                    # Pulse sequence
                    initpp(dir) # Reset internal parameter list

                    gradon(x,nxShim)                    # Set x shim
                    gradon(y,nyShim)                    # Set y shim
                    gradon(z,nzShim)                    # Set z shim 
                    gradon(o,noShim)                    # Set o shim 

#------------------------------------------------------
#Turn on Regulators on Gradient Driver
#------------------------------------------------------

   
#ttlon(b3) # Enable p-side
  # ttlon(b8) # Enable n-side
  # wait(wRegulator)


#-----------------------------------------------------
#Encoding Period
#-----------------------------------------------------
#Initial 90 RF Pulse
   pulse(mode,a90,p1,dRF90)              
   
#Turn on the Z Gradient (Planar)
#delay(dRegulator)
#wait(wRegulator)
   gradon(nGradZ,nZGradAmplitude)

#Turn on the X Gradient (Solenoid)
   gradon(nGradX,nXGradAmplitude)

#Add delay equal to the length of the X Gradient
   delay(dXGrad)

#Turn off the X Gradient
   gradoff(nGradX)

#Wait the time difference between the z grad and x grad
   delay(dDeltaGrad)

#Turn off the z Gradient
   gradoff(nGradZ)
   
   
   #wait(wRegulator)
#180 Encoding Pulse
   pulse(mode,a180,p2,dRF180)      
   
#Delay until the Detection Period Starts    
   delay(dEncoding)                     

#-------------------------------------------------------------------------------
#Detection Period -- This is taken from the CPMG Sequence in the Prospa Software
#-------------------------------------------------------------------------------
   loop(l1,nEchoes)
      pulse(mode,a180,p2,dRF180)  
	  
      delay(d180_acq)      
      
      acquire("append",nPnts,dAcq)     # Acquire echo and wait
      loop(l2,nDummy)                  # Dummy echo loop
        pulse(mode,a180,p2,dRF180)        # 180 internal pulse
        delay(dDummy)                 # Dummy echo time delay
      endloop(l2)
   endloop(l1)

   lst = endpp() # Return parameter list

# Phase cycle

   phaseList = [2,0,2,0; # -x,x,-x,x : 90 phase
                3,1,1,3; # -y,y,y,-y : 180 phase
                2,0,2,0] # -x,x,-x,x : Acquire phase
			   
	#phaseList = [2,0; # -x,x,-x,x : 90 phase
     #           3,3; # -y,y,y,-y : 180 phase
       #         2,0] # -x,x,-x,x : Acquire phase

endproc(lst,tabs,interface,relationships,variables,dim,phaseList)
