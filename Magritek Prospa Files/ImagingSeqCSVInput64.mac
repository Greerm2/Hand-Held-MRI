#########################################################
# 
# ImagingSeqCSVInput64
#
#ImagingSeq
#Program to collect images with the single sided MRI Sensor
#To be used with gradient driver circuit designed by Prof Mandal
#Modified from a simple CPMG Sequence
#Written by Mason Greer
#PhD Student CWRU
#2016
#
#
# Copyright (c) Magritek Ltd 2014
#
# U.I. V3
#########################################################

procedure(ImagingSeqCSVInput64, guipar)

   keaCtrl:checkVersion(2.15,1.1)

   n = :windowdefinition()

   windowvar(wv_dispMode,wv_ctrls,wv_shift,wv_other,wv_rel,
             wv_pp_list,wv_pp_name,wv_var,wv_tabs,wv_phase_list)

   wv_tabs  = ["Pulse Sequence","Progress","acquisition","processing+display","File settings"] # Tab names
   wv_ctrls = [2,36,37,46,47,70,71,100,101,121,122,131] # Control groups
   wv_shift = [-14,142,298,454,610,613] # Amount to shift control groups
   wv_other = [130,224,831]  # Collapse control and window size
   wv_saved = "false"

   (wv_rel,wv_var,wv_pp_list,wv_pp_name,wv_phase_list) = :getseqpar()

   if(nrArgs == 0)
      guipar = "show"
   endif

   keaCtrl:setUp(n,"ImagingSeqCSVInput64",getmacropath(),guipar)
   if(guipar == "hide")
      return(n)
   elseif(guipar == "show")
      try; :initGUI(n); catch; endtry;
      showwindow(n)
      return(n)
   else
      setwindowpar(n,"type","dialog")
      guipar = showdialog(n)
      return(guipar)
   endif

endproc()

#########################################################
# 
# Returns important pulse sequence parameters
#
# rel ......... relationship between pulse sequence parameters
# var ......... variable which change during the pulse sequence
# pp_list ..... list of pulse sequence parameters sent to DSP
# pp_name ..... name of DSP pulse program to run
# phase_list .. phase cycling information
#
#########################################################

procedure(getseqpar)

   rel = ["nxShim = xcal*xshim/1000",
          "nyShim = ycal*yshim/1000",
          "nzShim = zcal*zshim/1000",
          "noShim = ocal*oshim/1000",
          "a90 = 90Amplitude",
          "a180 = 180Amplitude",
          "dRF90 = pulseLength90",
          "dRF180 = pulseLength180",
          "d90_180 = echoTime/2-dRF90-pgo-0.5",
          "d180_acq = echoTime/2-acqTime*500-dRF180/2+rxLat-1+echoShift",
          "dAcq = echoTime-dRF180-pgo-d180_acq-1",
          "dDummy = echoTime-dRF180-pgo",
          "dRegulator = 300",
          "dXGrad = xGradLength",
          "dZGrad = zGradLength",
          "dDeltaGrad = dZGrad-dXGrad-4.4",
          "nGradX = xGradChannel",
          "nGradZ = zGradChannel",
          "nXGradAmplitude = round(10*32768/10)",
          "nZGradAmplitude = round(10*32768/10)",
          "wRegulator = 500*100",
          "dEncoding =  dZGrad+2.2+2.2+2.2+2.2+0.18+0.18+echoTime/2-pgo-0.5",
          "numSteps = numSteps",
          "nEchoes = nrEchoes",
          "nPnts = nrPnts",
          "nDummy = dummyEchoes",
          "totPnts = nrPnts*nrEchoes",
          "totTime = nrEchoes*echoTime*(dummyEchoes+1)",
          "b5 = 0x01",
          "b4 = 0x04",
          "b9 = 0x02",
          "b3 = 0x10",
          "b8 = 0x08"]
   var = ["nXGradAmplitude","nZGradAmplitude"]
   pp_list = ["nxShim","nyShim","nzShim","noShim","a90","p1","dRF90","nGradZ","nZGradAmplitude","nGradX","nXGradAmplitude","dXGrad","dDeltaGrad","a180","p2","dRF180","dEncoding","nEchoes","l1","d180_acq","nPnts","dAcq","nDummy","l2","dDummy"]
   pp_name = "ImagingSeqCSVInput64.p"
   phase_list = [2,0,2,0;3,1,1,3;2,0,2,0]

endproc(rel,var,pp_list,pp_name,phase_list)


#########################################################
# 
# Provide an interface to this macro which does not
# require the use of the window interface
#
# User must supply a list of parameter (see help file)
# and the pulse program name if different from 
# "$macro$_ext.p"
#
#########################################################

procedure(backdoor, guipar)

   keaCtrl:checkVersion(2.15,1.1)

   (rel,var,pp_list,pp_name,phase_list) = :getseqpar()
  
   (guipar,ppList,pcList,pcIndex,varList) = keaCtrl:initialisePP(getmacropath(),getmacroname(),guipar,rel,var,pp_list,pp_name,phase_list)
   
   r = keaCtrl:runBDPP(guipar,ppList,pcList,pcIndex,varList)

endproc(r)

#########################################################
# 
# Define the window gui
#
#########################################################

procedure(windowdefinition)

   # Automatically generated window definition procedure.
   # Any code added manually will be removed if layout modified interactively
   n = window("Image Sequence CSV Y", -1, -1, 913, 828)

      # Define all controls with basic parameters
      getmessage(0,
        keaCtrl:processMessage();)
      tab(1, 6, 7, 895, 212,
         which = getpar(0,1,"currenttab");
         if(which == 3);
         fn = findobj(0,"name","filter");
         keaCtrl:enableControls(fn+1,fn+3,fn);
         fn = findobj(0,"name","fitType");
         keaCtrl:enableControls(fn+1,fn+8,fn,3);
         endif();)
      groupbox(2, "Pulse sequence", 9, 9, 887, 149)
      statictext(3, 66, 34, "center", "B1 Frequency (MHz)")
      textbox(4, 43, 49, 46)
      statictext(5, 66, 75, "center", "Inter-exp delay (ms)")
      textbox(6, 43, 89, 46)
      statictext(7, 221, 42, "right", "90 amplitude (dB)")
      textbox(8, 227, 38, 40)
      statictext(9, 221, 68, "right", "180 amplitude (dB)")
      textbox(10, 227, 64, 40)
      statictext(11, 221, 94, "right", "Pulse length 90(us)")
      textbox(12, 227, 90, 40)
      statictext(13, 221, 120, "right", "Pulse length 180(us)")
      textbox(14, 227, 116, 40)
      statictext(15, 376, 42, "right", "Echotime (us)")
      textbox(16, 382, 38, 40)
      statictext(17, 376, 68, "right", "Number of echoes")
      textbox(18, 382, 64, 40)
      statictext(19, 376, 94, "right", "Echo shift (us)")
      textbox(20, 382, 90, 40)
      statictext(21, 531, 42, "right", "Dummy echoes")
      textbox(22, 537, 38, 40)
      statictext(23, 531, 68, "right", "Dummy scans")
      textbox(24, 537, 64, 40)
      statictext(25, 531, 94, "right", "Number of Steps")
      textbox(26, 537, 90, 40)
      statictext(27, 686, 42, "right", "X Grad Length (Short)")
      textbox(28, 692, 38, 40)
      statictext(29, 686, 68, "right", "Z Grad Length (Long)")
      textbox(30, 692, 64, 40)
      statictext(31, 841, 42, "right", "X Grad Channel (0-3)")
      textbox(32, 847, 38, 40)
      statictext(33, 841, 68, "right", "Z Grad Channel (0-3)")
      textbox(34, 847, 64, 40)
      statictext(35, 841, 94, "right", "K Space File Path")
      textbox(36, 847, 90, 40)
      groupbox(37, "Progress", 9, 165, 887, 149)
      statictext(38, 336, 223, "right", "Current scan:")
      statictext(39, 341, 223, "left", "0")
      statictext(40, 337, 244, "right", "Current SNR:")
      statictext(41, 342, 244, "left", "0")
      statictext(42, 592, 223, "right", "Estimated remaining expt. time (mm:ss):")
      statictext(43, 604, 223, "left", "00:00")
      statictext(44, 452, 244, "right", "Progress:")
      progressbar(45, 462, 243, 131, 16, "horizontal")
      statictext(46, 604, 244, "left", "00:00")
      groupbox(47, "Acquisition", 9, 321, 887, 149)
      statictext(48, 246, 350, "center", "Rx Gain (dB)")
      textmenu(49, 229, 368, 39, 200)
      statictext(50, 246, 399, "center", "Rx Phase (degrees)")
      textbox(51, 229, 415, 39)
      statictext(52, 354, 352, "center", "Number of")
      statictext(53, 354, 365, "center", "complex points")
      textmenu(54, 401, 354, 62, 200,
         keaCtrl:updateAcqTime();)
      statictext(55, 354, 384, "center", "Dwell time")
      statictext(56, 354, 397, "center", "(us)")
      textmenu(57, 401, 387, 62, 200,
         keaCtrl:updateFilters();)
      statictext(58, 354, 418, "center", "Number of")
      statictext(59, 354, 431, "center", "scans")
      textbox(60, 401, 419, 62)
      statictext(61, 528, 366, "center", "Flat filter")
      checkbox(62, 564, 367, "no,yes", "no",
           keaCtrl:setDwellTimeMenu();
           keaCtrl:updateFilters();)
      statictext(63, 528, 390, "center", "Accumulate")
      checkbox(64, 564, 391, "no,yes", "no")
      statictext(65, 528, 414, "center", "Phase cycle")
      checkbox(66, 564, 416, "no,yes", "yes")
      statictext(67, 656, 350, "center", "Spectral width (kHz)")
      textbox(68, 627, 364, 56)
      statictext(69, 656, 401, "center", "Acquisition time (ms)")
      textbox(70, 627, 415, 56)
      groupbox(71, "Laplace_CPMG", 9, 477, 887, 149)
      groupbox(72, "", 181, 494, 166, 119)
      statictext(73, 294, 515, "right", "Filter time domain")
      checkbox(74, 302, 516, "no,yes", "no",
           fn = findobj(0,"name","filter");
           keaCtrl:enableControls(fn+1,fn+3,fn);)
      statictext(75, 211, 546, "right", "Filter")
      textmenu(76, 218, 542, 85, 200)
      button(77, 313, 542, 22, 22, "...",
         filters();)
      statictext(78, 294, 578, "right", "Time magnitude")
      checkbox(79, 302, 579, "no,yes", "no")
      groupbox(80, "", 353, 494, 97, 119)
      statictext(81, 390, 520, "center", "Sum echoes")
      checkbox(82, 426, 520, "no,yes", "no")
      statictext(83, 393, 549, "center", "Autophase")
      checkbox(84, 426, 550, "no,yes", "no")
      statictext(85, 394, 578, "center", "Normalize")
      checkbox(86, 426, 580, "no,yes", "no")
      groupbox(87, "", 455, 494, 125, 119)
      statictext(88, 551, 521, "right", "Exponential fit")
      statictext(89, 551, 539, "right", "Bi-exponential fit")
      statictext(90, 551, 557, "right", "Inverse-Laplace fit")
      statictext(91, 551, 575, "right", "No fit")
      radiobuttons(92, 556, 523, 18, "vertical", "exp,biexp,nnls,none", "exp",
           fn = findobj(0,"name","fitType");
           keaCtrl:enableControls(fn+1,fn+8,fn,3);)
      groupbox(93, "", 586, 494, 137, 119)
      statictext(94, 657, 509, "center", "Relaxation range (ms)")
      statictext(95, 645, 535, "right", "Minimum")
      textbox(96, 652, 530, 43)
      statictext(97, 645, 557, "right", "Maximum")
      textbox(98, 652, 553, 43)
      statictext(99, 645, 584, "right", "Alpha")
      textbox(100, 652, 582, 44)
      groupbox(101, "File_Settings", 9, 633, 887, 149)
      statictext(102, 249, 681, "right", "Working")
      statictext(103, 249, 694, "right", "directory")
      textbox(104, 265, 682, 215)
      button(105, 485, 682, 22, 22, "...",
         keaFiles:setWorkingDir();)
      statictext(106, 256, 718, "right", "Experiment")
      statictext(107, 241, 731, "right", "name")
      textbox(108, 265, 721, 105)
      button(109, 376, 721, 22, 22, "...",
         keaFiles:setExpName();)
      statictext(110, 478, 718, "right", "Experiment")
      statictext(111, 468, 731, "right", "number")
      textbox(112, 486, 721, 25)
      button(113, 516, 721, 22, 22, "...",
         keaFiles:setExpNr();)
      statictext(114, 540, 680, "center", "Save")
      statictext(115, 540, 693, "center", "data")
      checkbox(116, 568, 687, "false,true", "true")
      statictext(117, 584, 718, "center", "Auto")
      statictext(118, 584, 731, "center", "increment")
      checkbox(119, 619, 726, "no,yes", "no")
      button(120, 605, 675, 40, 36, "Load Data",
         keaFiles:loadData();)
      button(121, 660, 675, 40, 50, "Open data folder",
         keaFiles:openDataFolder();)
      colorbox(122, 188, 795, 10, 10, [255,255,255,255])
      colorbox(123, 188, 808, 10, 10, [255,255,255,255])
      button(124, 208, 792, 54, 29, "Run",
         (wv_rel,wv_var,wv_pp_list,wv_pp_name,wv_phase_list) = :getseqpar();
         keaCtrl:runPP(getmacropath(),wv_pp_name);)
      button(125, 273, 792, 54, 29, "Abort",
         setwindowpar(0,"title","Wait for macro to abort ...");
         wvExpStatus = "stop";)
      button(126, 338, 792, 54, 29, "Finish",
         setwindowpar(0,"title","Wait for phase-cycling to complete ...");
         wvExpStatus = "finish";)
      button(127, 403, 792, 54, 29, "Load Par.",
         keaFiles:loadParameters();)
      button(128, 468, 792, 54, 29, "Help",
         help("Macros\Custom","ImagingSeqCSVInput64.htm");)
      button(129, 533, 792, 54, 29, "Kea Pref.",
         keaCtrl:showPreferences();)
      button(130, 598, 792, 54, 29, "Collapse",
         keaCtrl:toggleWindowSize(1);)
      button(131, 663, 792, 54, 29, "Close",
         guipar = getctrlvalues(0);
         if(getwindowpar(0,"type") == "dialog");
         guipar = keaFiles:addWindowSpecifics(guipar);
         keaFiles:saveCommonPar(guipar);
         closedialog(guipar);
         else;
         keaFiles:saveParameters();
         closewindow(0);
         endif;)
      menu(132, "bkgMenu", "Edit macro\tCtrl+Dbl-Click", edit("$getmacroname()$"),
                "Show compiler\tCtrl+Shift+Dbl-Click", MakePulseProgram("$getmacropath()$","$rmext(getmacroname())$"))

     # Set other control parameters
      setpar(n,1,"active","true",
                  "inittabs",[""])
      setpar(n,4,"valueID","b1Freq",
                  "tag","freqRange",
                  "type","double",
                  "range",[1,400])
      setpar(n,6,"valueID","ieTime",
                  "type","float",
                  "range",[20,1e+008])
      setpar(n,8,"valueID","90Amplitude",
                  "type","float",
                  "range",[-85,1])
      setpar(n,10,"valueID","180Amplitude",
                  "type","float",
                  "range",[-85,1])
      setpar(n,12,"valueID","pulseLength90",
                  "type","float",
                  "range",[1,500])
      setpar(n,14,"valueID","pulseLength180",
                  "type","float",
                  "range",[1,500])
      setpar(n,16,"valueID","echoTime",
                  "type","float",
                  "range",[2,327670])
      setpar(n,18,"valueID","nrEchoes",
                  "type","integer",
                  "range",[1,8192])
      setpar(n,20,"valueID","echoShift",
                  "type","float",
                  "range",[-20,20])
      setpar(n,22,"valueID","dummyEchoes",
                  "type","integer",
                  "range",[0,100])
      setpar(n,24,"valueID","dummies",
                  "type","integer",
                  "range",[0,20])
      setpar(n,26,"valueID","numSteps",
                  "type","integer",
                  "range",[0,10000])
      setpar(n,28,"valueID","xGradLength",
                  "type","float",
                  "range",[2,327670])
      setpar(n,30,"valueID","zGradLength",
                  "type","float",
                  "range",[2,327670])
      setpar(n,32,"valueID","xGradChannel",
                  "type","integer",
                  "range",[0,3])
      setpar(n,34,"valueID","zGradChannel",
                  "type","integer",
                  "range",[0,3])
      setpar(n,36,"valueID","kSpaceFilePath",
                  "type","string")
      setpar(n,39,"objID","curScanCtrl")
      setpar(n,41,"objID","curSNRCtrl")
      setpar(n,43,"objID","remTimeCtrl")
      setpar(n,45,"objID","progressCtrl")
      setpar(n,46,"objID","expTimeCtrl")
      setpar(n,49,"valueID","rxGain",
                  "type","integer",
                  "tooltip","20-40 dB gives optimal SNR.\rDecrease if overload occurs.",
                  "range",[-20,70],
                  "menu",["-20","-17","-14","-11","-8","-5","-2","1","4","7","10","13","16","19","22","25","28","31","34","37","40","43","46","49","52","55","58","61","64","67","70"])
      setpar(n,51,"valueID","rxPhase",
                  "type","float",
                  "tooltip","Applies a fixed phase shift to collected data.\rIgnored if autophasing.")
      setpar(n,54,"valueID","nrPnts",
                  "type","integer",
                  "range",[2,65536],
                  "menu",["2","4","8","16","32","64","128","256","512","1024","2048","4096","8192","16384","32768","65536"])
      setpar(n,57,"valueID","dwellTime",
                  "type","float",
                  "menu",[""])
      setpar(n,60,"valueID","nrScans",
                  "type","integer",
                  "range",[1,1e+006])
      setpar(n,62,"valueID","flatFilter",
                  "tooltip","On: all frequencies equally weighted.\rOff: center frequencies enhanced.")
      setpar(n,64,"valueID","accumulate")
      setpar(n,66,"valueID","usePhaseCycle")
      setpar(n,68,"valueID","bandwidth",
                  "tag","disable")
      setpar(n,70,"valueID","acqTime",
                  "tag","disable")
      setpar(n,74,"valueID","filter")
      setpar(n,76,"valueID","filterType",
                  "menu",[""])
      setpar(n,79,"valueID","timeMag")
      setpar(n,82,"valueID","sumEchoes")
      setpar(n,84,"valueID","autoPhase")
      setpar(n,86,"valueID","normalize")
      setpar(n,92,"valueID","fitType")
      setpar(n,96,"valueID","x_minimum")
      setpar(n,98,"valueID","x_maximum")
      setpar(n,100,"valueID","alpha")
      setpar(n,104,"valueID","dataDirectory",
                  "type","string",
                  "tooltip","Where experimental data will be stored.")
      setpar(n,108,"valueID","expName",
                  "type","string",
                  "tooltip","A subdirectory of the data working directory to store different experiments.")
      setpar(n,112,"valueID","expNr",
                  "tooltip","A numbered subdirectory below the experiment name.\rNot made if entry is blank.")
      setpar(n,116,"valueID","saveData")
      setpar(n,119,"valueID","incExpNr",
                  "tooltip","Increment the experiment number after each experiment.")
      setpar(n,120,"tooltip","Load and display the data specified in the directories fields")
      setpar(n,121,"tooltip","View the data directory in Windows Explorer.")
      setpar(n,122,"objID","ppStatus",
                  "tooltip","Experiment Status Indicator\rGreen: running\rBlue: processing\rYellow: waiting")
      setpar(n,123,"objID","rxOverflow",
                  "tooltip","Receiver Overflow Indicator\rRed: overflow")
      setpar(n,124,"valueID","run",
                  "tooltip","Start the experiment.")
      setpar(n,125,"valueID","stop",
                  "tooltip","Stop the experiment without saving data.",
                  "active","true")
      setpar(n,126,"valueID","finish",
                  "tooltip","Finish the current phase cycle and save data.",
                  "active","true")
      setpar(n,127,"valueID","load",
                  "tooltip","Load a parameter set for a similar experiment.")
      setpar(n,128,"valueID","help",
                  "tooltip","Display HTML help for this experiment.",
                  "active","true")
      setpar(n,129,"valueID","showPref",
                  "tooltip","Display a preferences dialog for the Kea spectrometer.")
      setpar(n,130,"valueID","size",
                  "tooltip","Expand or collapse the window size to show all or fewer controls.",
                  "active","true")
      setpar(n,131,"valueID","close",
                  "tooltip","Close the window saving all parameters.")

     # Set other window parameters
      setwindowpar(n,"bkgmenu",132)

endproc(n)

#######################################################
# Execute the pulse program, collecting nrScans of 
# data and displaying the result in the 1D plot. 
#
# This procedure can be modified to perform more
# complex functions using the passed parameters:
#
# guipar ..... all parameters from the user interface
# ppList ..... the pulse program parameter list
# pcList ..... phase-cycle list
# pcIndex .... indices of phase parameters in ppList
# varIndex ... indices of variable parameters in ppList
#
# 19-Dec-2011
#######################################################

procedure(execpp,guipar,ppList,pcList,pcIndex,varIndex)

   guipar = guipar + ["showTimeDomain = \"yes\"",
                      "showFreqDomain = \"yes\""]

# Make all gui parameters available
   assignlist(guipar)

# Do some safety checks
   if(d90_180 < 1 | d180_acq < 1 | dAcq < 1 | dDummy < 1)
      message("Error","Pulse sequence timing error!\rReduce acquisition time or increase echotime.","error")
      return(0)
   endif

   #if(dAcq-keaRun:getAcqTime(guipar) <= 0)
     # message("Error","Pulse sequence timing error!\rReduce acquisition time or increase echotime.","error")
      #return(0)
  # endif

 # Check RF duty cycle
   if(keaRun:highDutyCycle(dRF180*nEchoes,nEchoes*echoTime,guipar))
      return(0)
   endif

# Check for too much data
   if(nEchoes*nrPnts > 128*1024)
      message("Error","Out of DSP memory!\rReduce number of points per echo or number of echoes.\r\rMaximum number of echoes for number of points\rselected is $128*1024/nrPnts$.","error")
      return(0)
   endif
   
   #Check to make sure gradients are correct lengths
   if(dXGrad > dZGrad)
	  message("X Gradient must be shorter than Z Gradient.","error")
      return(0)
   endif

# Calculate a suitable time axis
   tAxis = [0:1:nrPnts-1]/(nrPnts)*acqTime
   totalTime = ([0:1:totPnts-1]/totPnts)*totTime + echoTime
   sizeTAxis = size(tAxis,1)
   maxT = tAxis[sizeTAxis-1]

# Allocate memory for outputs
   echoData   = cmatrix(totPnts)
   echoData2D = cmatrix(nrPnts,nrEchoes)
   ampArray   = matrix(nrEchoes)
   tauArray   = matrix(nrEchoes)
   echoSum    = cmatrix(nrPnts)
   fltTot     = matrix(nrPnts,nrEchoes)
   T2Kspace   = matrix(numSteps,numSteps)
   ampKSpace  = matrix(numSteps,numSteps)
   

#Allocate memory for 3d array
   kspace3d = cmatrix(nrPnts,nrEchoes,numSteps^2)
   totalDataPoints = nrPnts*nrEchoes*numSteps^2

   xPosition = 0
   zPosition = 0

# Filter
   if(filter == "yes")
      flt = filters:get_filter(filterType,"FTEcho",nrPnts)
      for(ec = 0 to nrEchoes-1)
         fltTot[~,ec] = flt
      next(ec)
      fltTot = reshape(fltTot,totPnts,1)
   else
      flt = matrix(nrPnts)+1
      fltTot = matrix(totPnts)+1
   endif
#
 # Make subplots. wvPP is the current-plot's parent
   if(fitType == "nnls")
    (prt,pri,prn) = keaPlot:getPlotRegions(guipar,3,wvPP)
   else
    (prt,pri) = keaPlot:getPlotRegions(guipar,2,wvPP)
     prn = null
   endif
   #im1 = keaPlot:getImageRegions(guipar,1,wvPP2)


# Make subplots
     wvPP2->multiplot(2,2)

 #Intialise phase
   ph = 0

 #sIntialise progress tab
   :updateProgress(-1,guipar)
#
#---------------------------------------------------------
#Start Pulse Sequence
#---------------------------------------------------------

#The number scan that we are currently on. THis is for the progress bar.
scanNum = 1

#Load in the KSpace File Generated in Matlab
import2dpar("ab","ascii","machine","littleend",
            "xyrc","real","fls","float")
kSpaceMat = import2d(kSpaceFilePath,2,numSteps^2)

#Loop to navigate kspace.  
for(kIndex = 0 to numSteps^2 - 1)
   echoData   = cmatrix(totPnts)
   
   #Update kSpace values
   kspaceZVoltage = kSpaceMat[1,kIndex]
   kspaceXVoltage = kSpaceMat[0,kIndex]

   tempZ = kspaceZVoltage*32767/10
   tempX = kspaceXVoltage*32767/10

  
   
#Send the new values to the pulse program
   ppList = keaRun:setPPNumber(ppList,varIndex[0],round(tempX))
   ppList = keaRun:setPPNumber(ppList,varIndex[1],round(tempZ))
   
   
# Accumulate scan
   for(scan = -dummies to nrScans-1)

    # Note the time at scan start
      t1 = time()   

    # Set phases for this scan
      (ppList,pAcq) = keaRun:setPPPhase(ppList,scan,pcList,pcIndex)

    # Send phase parameters to DSP
      dspwrite("x",0x00,ppList,wvPort)

    # Collect the data
      (status,data) = keaRun:getData(totPnts,guipar)
      if(status != "ok")
         return(0)
      endif

      if(scan < 0)
          
         pd = wvPP->subplot(1,1)
         pd->draw("false")
         pd->plot(matrix(totPnts))
         pd->title("Dummy experiment $-scan$")
         pd->draw("true")

      else
   
       # Accumlate the data
         echoData = keaRun:accumulate(accumulate,pAcq,echoData,data)
   
       # Extract the echoes.  Changed to account for the current step in kspace.
         for(ec = 0 to nrEchoes-1)  
            kspace3d[~,ec,kIndex] = flt.*echoData[ec*nrPnts:(ec+1)*nrPnts-1]/(scan+1)
         next(ec)
   
      # Autophase if desired
         if(autoPhase == "yes")
            if(((scan+1) % size(pcList) == 0))
              ph = keaRun:autoPhase(echoData,"maxreal")
              ph = ph*pi/180
            endif
         endif
   
      # Integrate each echo
       #  for(ec = 0 to nrEchoes-1)
        #    ampArray[ec]   = sum(real(kspace3d[~,ec,kIndex]*exp(i*ph)))/nrPnts
         #   tauArray[ec]   = echoTime*(ec+1)*(dummyEchoes+1)
       #  next(ec)
   
      # Display full time domain data
         if(sumEchoes == "no") 
            if(nrEchoes == 1)
               keaPlot:graphTime(prt,tAxis*1000,echoData.*fltTot*exp(i*ph),scan,guipar,
                                 "CPMG echo SCANS","Acquisition time (\G(m)s)")
            else
               keaPlot:graphTime(prt,totalTime/1000,echoData.*fltTot*exp(i*ph),scan,guipar,
                                 "Raw CPMG echoes SCANS","Echo centre time (ms)")
            endif
      # Display all echoes added together
     #    else 
      #      for(col = 0 to nrPnts-1)
       #        echoSum[col] = sum(kspace3d[col,~,kIndex]')*exp(i*ph)
        #    next(ec)
         #   keaPlot:graphTime(prt,
          #                    tAxis*1000,echoSum,scan,guipar,
           #                   "CPMG echo sum SCANS","Acquisition time (\G(m)s)")
         endif
   
   
   
      # Plot the integrals
       #  if(fitType == "none") # Just display integrals
      #      guipar = guipar + ["lineMode = \"none\""]
       #     keaPlot:graphXY(pri,tauArray/1000,ampArray,null,nrEchoes,
      #                     "Time (ms)","Average echo amplitude (UNITS)",
       #                    "Echo attenuation data",guipar)
        #    (result,resultParse,resultParseB) = ""
       #  else # Display integrals with fit after full phase cycle.
       #     if(scan > 0 & ((scan+1) % size(pcList) == 0)) 
       #        (result,resultParse,resultParseB) = :DisplayFit(pri,prn,tauArray,ampArray,nrEchoes,guipar)
     #      endif
   #      endif
#   
      endif # Dummy scans

    # Update progress bar
      :updateProgress(scanNum+dummies,guipar)
      
   # Update scan Number
      scanNum = scanNum + 1

    # Check timing
      #check = keaRun:checkTimeAndAbort(guipar,t1,scan,pcList,"ignoreLastScan")
      check = keaRun:checkTimeAndAbort(guipar,t1,scan,pcList)
      if(check == "abort")
         return(0)
      elseif(check == "finish")
         scan = scan + 1
         exitfor()
      endif

   next(scan) #End Averaging loop
   
#echoInt  = integvector(tAxis*1000,real(echoSum),0,maxT*1000)

# Store the T2 and Amplitude values into an image.  Then display that image.
#try
#ampKSpace[xPosition,zPosition] = echoInt;
 #  if(result!="")
    #ampKSpace[xPosition,zPosition] = eval(resultParse[0]);
	
  #  T2Kspace[xPosition,zPosition] = eval(resultParse[0]);
    
     
   #else
    #ampKSpace[xPosition,zPosition] = 0;
    #T2Kspace[xPosition,zPosition] = 0;
   #endif
   #Plot the KSpace Images
    # pd = wvPP2->subplot(1,1)
     #pd->image(ampKSpace,spectrum) 
     #pd->title("Amplitude k-Space")

     #pd = wvPP2->subplot(1,2)
     #pd->image(T2Kspace,spectrum)
     #pd->title("T2 K-Space")

   #Take the FFT of the Images
     #ampImage = fft_local:2d(ampKSpace,32,32,"sinebellsquared","sinebellsquared","FTEcho","FTEcho","yes")
   
     #pd = wvPP2->subplot(2,1)
     #pd->image(ampImage,spectrum) 
     #pd->title("Amplitude Image")

   #Take the FFT of the Images
     #T2Image = fft_local:2d(T2Kspace,32,32,"sinebellsquared","sinebellsquared","FTEcho","FTEcho","yes")
   
  #   pd = wvPP2->subplot(2,2)
   #  pd->image(T2Image,spectrum) 
    # pd->title("T2 Image")
   
#catch

 

# Update Rx Phase textbox in GUI
   if(autoPhase == "yes")
      try
         n = findobj(0,"name","rxPhase")
         phOld = getpar(0,n,"value")
         phNew = ((ph*180/pi)+phOld)%360
         setpar(0,n,"text",phNew)
      catch
      endtry
   endif

# Phase the raw echo data
   if(autoPhase == "yes")
      for(ec = 0 to nrEchoes-1)
         kspace3d[~,ec,kIndex] = kspace3d[~,ec,kIndex]*exp(i*ph)
     next(ec)
   endif

# Display echo data as 2D plot
   #:display2DData(im1,kspace3d[~,~,kIndex]/nrScans,guipar)


next(kIndex)  #End Kspace loop

# Save check the amount of data points, if there are too many, separate out the data into smaller portions
#Then save out separately

if(totalDataPoints <= 40000000)
	keaFiles:save3DData(guipar,kspace3d,"kspace3d1")
else
		#Check to see if the total number of steps is divisible by the maximum amount of data
		#if it is, then save out all the data.  else save out the data but take into account the fact
		#that there won't be a perfect amount of pixels.
		divisible = numSteps^2%(16*16)
		numDataFiles = trunc(numSteps^2/(16*16))		
		pointsPerDataSet = numSteps^2/numDataFiles
		
		if(divisible == 0)
			numDataFiles = trunc(numSteps^2/(16*16))
						
			for(dataCount = 1 to numDataFiles)			
				keaFiles:save3DData(guipar,kspace3d[~,~,dataCount*pointsPerDataSet-pointsPerDataSet:dataCount*pointsPerDataSet-1],"kspace3d$dataCount$")
			next(dataCount)
		
		else
			#numDataFiles = trunc(numSteps^2/(64*64))+1
			for(dataCount = 1 to numDataFiles)
				if (dataCount == numDataFiles)
					keaFiles:save3DData(guipar,kspace3d[~,~,dataCount*numDataFiles-numDataFiles:dataCount*numDataFiles-1],"kspace3d$dataCount$")
				else
					keaFiles:save3DData(guipar,kspace3d[~,~,dataCount*numDataFiles-numDataFiles:(dataCount*numDataFiles-numDataFiles)+divisible],"kspace3d$dataCount$")
				endif
			next(dataCount)
		endif
		
		
endif 

try
	keaFiles:save2DData(guipar,ampKSpace,"ampKSpace")
	keaFiles:save2DData(guipar,T2Kspace,"T2Kspace")
	keaFiles:save2DData(guipar,ampImage,"ampImage")
	keaFiles:save2DData(guipar,T2Image,"T2Image")
catch
endtry
keaFiles:incrementExperiment(guipar)

# Return the data
result = struct()
result->tau = tauArray
result->int = ampArray/nrScans
result->rawTau = totalTime # ms
result->rawAmp = 1000*echoData*exp(i*ph)/nrScans # uV


# Return result structure when called from backdoor
return(result)

endproc("execpp")


###################################################################
#
# Display time domain data in the 2D plot
#
# Parameters are:
# echoData2D ... the data to display
# guipar ....... the window parameters
#
###################################################################
 
procedure(display2DData, pd,echoData2D,guipar)

   assignlist(guipar)

   tmax = acqTime*1000 

   pd->draw("false")
      pd->image(echoData2D,[0,tmax],[0,(dummyEchoes+1)*nrEchoes*echoTime])
      pd->title("CPMG echoes (complex)")
      pd->ylabel("echo time (\G(m)s)")
      pd->xlabel("Acquisition time (\G(m)s)")
   pd->draw("true")

endproc()

###################################################################
#
# Display the passed data points and a fitted t2 curve
#
# Parameters are:
# x ........ the time array
# y ........ the amplitude arrays
# N ........ the number of data points to plot
# guipar ... GUI parameter list
#
###################################################################
 

procedure(DisplayFit,pri,prn,x,y,N,guipar)

  assignlist(guipar)

   if(fitType == "nnls")
      result = :ILFit(pri,prn,x/1000,y,N,guipar)
   else
      result = keaPlot:fitAndGraph(pri,x/1000,y,N,fitType,null,
                          "Time (ms)","Echo integral (UNITS)",
                          "Echo attenuation data",
                          "Fit result: RESULT",guipar)
  endif

  try
   if(result!="")
     resultParse = parse(result," ")
     resultParseA = parse(resultParse[6],"(")
     resultParseA = parse(resultParseA[1]," ")
     resultParseB = parse(resultParse[10], "(")
     resultParseB = parse(resultParseB[1], " ")
   else
     resultParseA = 0
     resultParseB = 0
   endif
catch
endtry
endproc(result,resultParseA,resultParseB)


###################################################################
#
# Display the passed data points and a fitted relaxation curve
# and relaxation spectrum
#
# Parameters are:
# x ....... the time array
# y ....... the amplitude arrays
# N ....... the number of data points to plot
# guipar ... GUI parameter list
#
###################################################################
 
procedure(ILFit,pri,prn,x,y,N,guipar)

   assignlist(guipar)

# Bin the data if more than 100 points
   if(N > 100)
      x_steps = 100 
     (timeDat,yData) = pseudologbin(x,y,100)
   else
     timeDat = x
     yData   = y
     x_steps = N-1
   endif

# Invert meaning of alpha and reduce range
   alpha = 10^(8-log10(alpha))

   guipar = guipar + ["exp_type = \"exp(-t/T)\"",
          "designMat = \"exp(-xData'*(1/xSpec))\"",
          "alpha = $alpha$",
          "logBin = \"true\"",
          "weightBins = \"true\"",
          "x_steps = $x_steps$"]

# Invert using Lawson and Hanson inverstion
   (specX,specY) = LHInvert(x,y,guipar)

# Get fit parameters
  (fit,chisq) = LHInvert:calcFit("exp(-t/T)",specX,specY,x,y)

# Plot original data with L&H fit
  # keaPlot:graphXYFit(pri,x,y,fit,null,size(x),
   #                   "Time (ms)","Average echo amplitude (UNITS)","Echo attenuation data (with IL fit)",guipar)

   guipar = guipar + ["xMap = \"log\"",
                      "traceCol = $wvSpectrumColor$",
                      "symbolShape = \"none\""]

# Plot the spectrum
  # keaPlot:graphXY(prn,specX,specY,null,size(specX),
             #         "log_(10)(T) ms","Amplitude","Relaxation Spectrum",guipar)

endproc("")


########################################################
# Update the progress bar and experiment times
########################################################

procedure(updateProgress, scans, guipar)

# Define progress/timing expressions

   if(isvar("progressCtrl"))

      assignlist(guipar)

      if(scans == -1)
         curSNRCtrl->text("-")
      endif

      repTime = ieTime + (pulseLength90+pulseLength180+2*zGradLength+.5*echoTime+nrEchoes*echoTime)/1000 

   # Define progress/timing expressions
      totTime = (nrScans*numSteps^2+dummies)*repTime/1000
      expTime = ((scans+1)*repTime)/1000
      remTime = totTime - expTime
      progress = 100*expTime/totTime

   # Update controls
     keaCtrl:updateProgress(scans+1-dummies,progress,totTime,expTime,remTime)

   endif

endproc()



